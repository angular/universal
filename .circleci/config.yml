# This file configures the build at https://circleci.com/gh/angular/universal
# Complete documentation is at https://circleci.com/docs/2.0/

# We use a docker image as the basis for our build, so that all the toolchains we use
# are already installed and the build can start running right away. It also guarantees
# the environment is portable and reproducible on your local machine.
var_1: &docker_image angular/ngcontainer:0.2.0

# CircleCI lets us pick the key for storing one or more caches, to speed up subsequent builds.
# We can use this to avoid re-fetching our dependencies from npm on every build.
# To ensure we don't load a stale cache, we invalidate it based on the entries in the key:
# - the checksum of Yarn's lock file
# - the branch we are on, which really shouldn't be needed since the yarn lock file should be hermetic
# - the docker image tag, working around an issue we saw where changing docker images causes permission
#   errors when restoring the cache, like when the user we run as changes
var_2: &cache_key angular-{{ .Branch }}-{{ checksum "yarn.lock" }}-0.2.0

# Each job will inherit these defaults
anchor_1: &job_defaults
  working_directory: ~/ng
  docker:
    - image: *docker_image

# After checkout, rebase on top of master, because we want to test the proposed merge of a
# onto the target branch, not just test what's on the user's fork.
# Similar to travis behavior, but not quite the same.
# See https://discuss.circleci.com/t/1662
anchor_2: &post_checkout
  post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

# Opt-in to the new goodness
version: 2

# These jobs will run in parallel, and report separate statuses to GitHub PRs
jobs:
  bazel-lint:
    <<: *job_defaults
    steps:
      - checkout:
          <<: *post_checkout
      # Enforce that BUILD files are formatted. Note that this uses the version of buildifier
      # from the docker image above - take care that you use the same version when you run
      # buildifier locally on your change.
      - run: 'buildifier -mode=check $(find . -type f \( -name BUILD.bazel -or -name BUILD \)) ||
              (echo "BUILD files not formatted. Please run ''yarn buildifier''" ; exit 1)'

  lint:
    <<: *job_defaults
    steps:
      - checkout:
          <<: *post_checkout
      # TODO: Don't do this
      - run: yarn install --frozen-lockfile
      - run: yarn lint

  build:
    <<: *job_defaults
    steps:
      - checkout:
          <<: *post_checkout

      - restore_cache:
          key: *cache_key

      - run: bazel info release

      # TODO: Don't do this
      - run: yarn install --frozen-lockfile
      # Install the dependencies from NPM
      #- run: bazel run @yarn//:yarn install

      # Build and Test
      # Use bazel query so that we explicitly ask for all buildable targets to
      # be built even though we run `bazel test`
      # See https://github.com/bazelbuild/bazel/issues/4257
      #- run: bazel query //... | xargs bazel test --config=ci
      - run: bazel test //...

      - store_artifacts:
          path: dist/bin/modules/aspnetcore-engine/npm_package/fesm2015/aspnetcore-engine.js
          destination: aspnetcore-engine.js

      - store_artifacts:
          path: dist/bin/modules/common/npm_package/fesm2015/common.js
          destination: common.js

      - store_artifacts:
          path: dist/bin/modules/express-engine/npm_package/fesm2015/express-engine.js
          destination: express-engine.js

      - store_artifacts:
          path: dist/bin/modules/hapi-engine/npm_package/fesm2015/hapi-engine.js
          destination: hapi-engine.js

      - store_artifacts:
          path: dist/bin/modules/module-map-ngfactory-loader/npm_package/fesm2015/module-map-ngfactory-loader.js
          destination: module-map-ngfactory-loader.js

      # If we get this far, save the node_modules directory for use next time.
      - save_cache:
          key: *cache_key
          paths:
            - "node_modules"

workflows:
  version: 2
  default_workflow:
    jobs:
      - build
      - bazel-lint
      - lint
