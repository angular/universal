# Configuration file for https://circleci.com/gh/angular/universal

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

# Note that the browser docker image comes with Chrome and Firefox preinstalled. This is just
# needed for jobs that run tests without Bazel. Bazel runs tests with browsers that will be
# fetched by the Webtesting rules. Therefore for jobs that run tests with Bazel, we don't need a
# docker image with browsers pre-installed.
# **NOTE 1**: Pin to exact images using an ID (SHA). See https://circleci.com/docs/2.0/circleci-images/#using-a-docker-image-id-to-pin-an-image-to-a-fixed-version.
#             (Using the tag in not necessary when pinning by ID, but include it anyway for documentation purposes.)
# **NOTE 2**: If you change the version of the docker images, also change the `cache_key` suffix.
var_1: &docker_image circleci/node:10.16-browsers@sha256:d2a96fe1cbef51257ee626b5f645e64dade3e886f00ba9cb7e8ea65b4efe8db1
var_2: &cache_key v2-nguniversal-{{ checksum "yarn.lock" }}-{{ checksum "WORKSPACE" }}-node-10.16

# Settings common to each job
var_3: &job_defaults
  working_directory: ~/ng
  docker:
  - image: *docker_image

# Job step for checking out the source code from GitHub. This also ensures that the source code
# is rebased on top of master.
var_4: &checkout_code
  checkout:
    # After checkout, rebase on top of master. By default, PRs are not rebased on top of master,
    # which we want. See https://discuss.circleci.com/t/1662
    post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

# Restores the cache that could be available for the current Yarn lock file. The cache usually
# includes the node modules and the Bazel repository cache.
var_5: &restore_cache
  restore_cache:
    key: *cache_key

# Saves the cache for the current Yarn lock file. We store the node modules and the Bazel
# repository cache in order to make subsequent builds faster.
var_6: &save_cache
  save_cache:
    key: *cache_key
    paths:
    - "node_modules"
    - "~/bazel_repository_cache"

# Job step that ensures that the node module dependencies are installed and up-to-date. We use
# Yarn with the frozen lockfile option in order to make sure that lock file and package.json are
# in sync. Unlike in Travis, we don't need to manually purge the node modules if stale because
# CircleCI automatically discards the cache if the checksum of the lock file has changed.
var_7: &yarn_install
  run: yarn install --frozen-lockfile --non-interactive

# Copies the Bazel config which is specifically for CircleCI to a location where Bazel picks it
# up and merges it with the project-wide bazel configuration (tools/bazel.rc)
var_8: &copy_bazel_config
  # Set up the CircleCI specific bazel configuration.
  run: sudo cp ./.circleci/bazel.rc /etc/bazel.bazelrc

# Run a step to setup an environment variable.
var_9: &setup_env_variables
  run:
    name: "Setup custom environment variables"
    command: |
      echo 'export CHROMEDRIVER_VERSION_ARG="--versions.chrome 75.0.3770.90"' >> $BASH_ENV # Redirect into $BASH_ENV

# Attaches the release output which has been stored in the workspace to the current job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
var_10: &attach_release_output
  attach_workspace:
    at: dist

version: 2

jobs:
  build:
    <<: *job_defaults
    resource_class: xlarge
    steps:
    - *checkout_code
    - *restore_cache
    - *copy_bazel_config
    - *yarn_install

    - run: yarn bazel test //...

    # Note: We want to save the cache in this job because the workspace cache also
    # includes the Bazel repository cache that will be updated in this job.
    - *save_cache

  lint:
    <<: *job_defaults
    steps:
    - *checkout_code
    - *restore_cache
    - *yarn_install

    # Enforce that BUILD files are formatted. Note that this uses the version of buildifier
    # from the docker image above - take care that you use the same version when you run
    # buildifier locally on your change.
    - run: 'yarn bazel:format -mode=check ||
                (echo "BUILD files not formatted. Please run ''yarn bazel:format''" ; exit 1)'
    # Run the skylark linter to check our Bazel rules
    - run: 'yarn bazel:lint ||
                (echo -e "\n.bzl files have lint errors. Please run ''yarn bazel:lint-fix''"; exit 1)'
    - run: yarn lint

  # This job exists only for backwards-compatibility with old scripts and tests
  # that rely on the pre-Bazel dist/modules-dist layout.
  # It duplicates some work with the job above: we build the bazel packages
  # twice. Even though we have a remote cache, these jobs will typically run in
  # parallel so up-to-date outputs will not be available at the time the build
  # starts.
  # No new jobs should depend on this one.
  build-packages-dist:
    <<: *job_defaults
    resource_class: xlarge
    steps:
    - *checkout_code
    - *restore_cache
    - *yarn_install

    - run: scripts/build-modules-dist.sh

    # Save the npm packages from //modules/... for other workflow jobs to read
    # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
    - persist_to_workspace:
        root: dist
        paths:
        - modules-dist

  # We run the integration tests outside of Bazel for now.
  # They are a separate workflow job so that they can be easily re-run.
  # When the tests are ported to bazel test targets, they should move to the "test"
  # job above, as part of the bazel test command. That has flaky_test_attempts so the
  # need to re-run manually should be alleviated.
  # See comments inside the integration/run_tests.sh script.
  integration_test:
    <<: *job_defaults
    steps:
    - *checkout_code
    - *restore_cache
    - *setup_env_variables
    - *yarn_install
    - *attach_release_output
    - run: ./integration/run_tests.sh

  # TODO(CaerusKaru): remove this step
  bazel-lint:
    <<: *job_defaults
    steps:
    - run: exit 0

workflows:
  version: 2
  default_workflow:
    jobs:
    - build
    - bazel-lint
    - lint
    - build-packages-dist
    - integration_test:
        requires:
        - build-packages-dist

general:
  branches:
    only:
    - master
    # 5.2.x, 6.0.x, etc
    - /\d+\.\d+\.x/
    # 5.x, 6.x, etc
    - /\d+\.x/
