# Configuration file for https://circleci.com/gh/angular/universal

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

# Note that the browser docker image comes with Chrome and Firefox preinstalled. This is just
# needed for jobs that run tests without Bazel. Bazel runs tests with browsers that will be
# fetched by the Webtesting rules. Therefore for jobs that run tests with Bazel, we don't need a
# docker image with browsers pre-installed.
# **NOTE 1**: Pin to exact images using an ID (SHA). See https://circleci.com/docs/2.0/circleci-images/#using-a-docker-image-id-to-pin-an-image-to-a-fixed-version.
#             (Using the tag in not necessary when pinning by ID, but include it anyway for documentation purposes.)
# **NOTE 2**: If you change the version of the docker images, also change the `cache_key` suffix.
var_1: &docker_image circleci/node:10.20-browsers@sha256:a3a8b607769ec6c10d6041a59ca6f77113ee8af7bcc9c90a08cadc8e6de92c62
var_2: &cache_key v1-nguniversal-{{ checksum "yarn.lock" }}-{{ checksum "WORKSPACE" }}-node-10.20

# Workspace initially persisted by the `setup` job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
# https://circleci.com/blog/deep-diving-into-circleci-workspaces/
var_5: &workspace_location ~/

version: 2.1

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  action-executor:
    docker:
      - image: *docker_image
    working_directory: ~/ng

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  custom_attach_workspace:
    description: Attach workspace at a predefined location
    steps:
      - attach_workspace:
          at: *workspace_location

  copy-bazel-config:
    description: Copy Bazel config
    steps:
      # Copies the Bazel config which is specifically for CircleCI to a location where Bazel picks it
      # up and merges it with the project-wide bazel configuration (tools/bazel.rc)
      # Set up the CircleCI specific bazel configuration.
      - run: sudo cp ./.circleci/bazel.rc /etc/bazel.bazelrc

jobs:
  setup:
    executor: action-executor
    steps:
      # After checkout, rebase on top of master. By default, PRs are not rebased on top of master,
      # which we want. See https://discuss.circleci.com/t/1662
      - checkout:
          post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"
      - restore_cache:
          keys:
            - *cache_key
      - run: yarn install --frozen-lockfile --non-interactive
      # Reduces ~25mb from being persisted to the workspace
      - run: rm -rf .git
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ng
            - .cache/yarn
            - bazel_repository_cache
            - bazel_disk_cache

  build:
    executor: action-executor
    resource_class: xlarge
    steps:
      - custom_attach_workspace
      - copy-bazel-config
      - run: yarn bazel test //...
      - run: scripts/build-modules-dist.sh
      - save_cache:
          key: *cache_key
          paths:
            - ~/.cache/yarn
            - ~/bazel_repository_cache
            - ~/bazel_disk_cache
      - persist_to_workspace:
          root: *workspace_location
          paths:
            - ng/dist

  lint:
    executor: action-executor
    steps:
      - custom_attach_workspace
      - copy-bazel-config
      # Enforce that BUILD files are formatted. Note that this uses the version of buildifier
      # from the docker image above - take care that you use the same version when you run
      # buildifier locally on your change.
      - run: 'yarn bazel:format -mode=check ||
                  (echo "BUILD files not formatted. Please run ''yarn bazel:format''" ; exit 1)'
      # Run the skylark linter to check our Bazel rules
      - run: 'yarn bazel:lint ||
                  (echo -e "\n.bzl files have lint errors. Please run ''yarn bazel:lint-fix''"; exit 1)'
      - run: yarn lint

  # We run the integration tests outside of Bazel for now.
  # They are a separate workflow job so that they can be easily re-run.
  # When the tests are ported to bazel test targets, they should move to the "test"
  # job above, as part of the bazel test command. That has flaky_test_attempts so the
  # need to re-run manually should be alleviated.
  # See comments inside the integration/run_tests.sh script.
  integration_test:
    executor: action-executor
    steps:
      - custom_attach_workspace
      # Run a step to setup an environment variable.
      - run:
          name: "Setup custom environment variables"
          command: |
            echo 'export CHROMEDRIVER_VERSION_ARG="--versions.chrome 75.0.3770.90"' >> $BASH_ENV # Redirect into $BASH_ENV
      - run: ./integration/run_tests.sh

workflows:
  version: 2
  default_workflow:
    jobs:
    - setup
    - build:
        requires:
          - setup
    - lint:
        requires:
          - setup
    - integration_test:
        requires:
          - build

general:
  branches:
    only:
    - master
    # 5.2.x, 6.0.x, etc
    - /\d+\.\d+\.x/
    # 5.x, 6.x, etc
    - /\d+\.x/
